// compare with removal
	for (int m1parIndex = 0; m1parIndex < m1parents.size(); m1parIndex++) { // loop through reactant atom trees
	    matchTreeNode m1curr = m1parents.get(m1parIndex); // reactant atom tree for testing
	    for (int m2parIndex = 0; m2parIndex < m2parents.size(); m2parIndex++) { // loop through product atom trees
		matchTreeNode m2curr = m2parents.get(m2parIndex); // product atom tree for testing
		if (m1curr.toString().equals(m2curr.toString()) && !m2visited.contains(m2parIndex) && !m2eqMatch.contains(m2parIndex) && !m1eqMatch.contains(m1parIndex)) { // tests if atoms trees for reactant and product start with the same node/ are not already matched
		    ArrayList<matchTreeNode> m1children1 = m1curr.getChildren(); // reactant tree second level
		    ArrayList<matchTreeNode> m2children1 = m2curr.getChildren(); // product tree second level
		    ArrayList<matchTreeNode> match = compareChildren(m1children1, m2children1); // second level test
		    if (match.size() != 0) { // second level test fails, try removing
			ArrayList<Integer> m2ChldrnMatched = new ArrayList<Integer>(); // buffer for matching children which dont need to be removed
			// insert removal comparisons
			if (m1children1.size() < m2children1.size()) {
			    ArrayList<Integer> m2lvl1matched = new ArrayList<Integer>();
			    for (int m1test1 = 0; m1test1 < m1children1.size(); m1test1 ++) {
				for (int m2test1 = 0; m2test1 < m2children1.size(); m2test1 ++) {
				    matchTreeNode m1lvl1curr = m1children1.get(m1test1);
				    matchTreeNode m2lvl1curr = m2children1.get(m2test1);
				    if (m1lvl1curr.toString().equals(m2lvl1curr.toString()) && !m2lvl1matched.contains(m2test1)) {
					ArrayList<matchTreeNode> m1lvl1children = m1lvl1curr.getChildren();
					ArrayList<matchTreeNode> m2lvl1children = m2lvl1curr.getChildren();
					//System.out.println(m1parIndex + " " + m1lvl1children + " " + m2lvl1children);
					ArrayList<matchTreeNode> lvl1chldresults = compareChildren(m1lvl1children, m2lvl1children);
					if (lvl1chldresults.size() == 0) {
					    ArrayList<Integer> m2lvl2matched = new ArrayList<Integer>();
					    for (int m1test2 = 0; m1test2 < m1lvl1children.size(); m1test2 ++) {
						for (int m2test2 = 0; m2test2 < m2lvl1children.size(); m2test2 ++) {
						    matchTreeNode m1lvl2curr = m1lvl1children.get(m1test2);
						    matchTreeNode m2lvl2curr = m2lvl1children.get(m2test2);
						    if (m1lvl2curr.toString().equals(m2lvl2curr.toString()) && !m2lvl2matched.contains(m2test2)) {
							ArrayList<matchTreeNode> m1lvl2children = m1lvl2curr.getChildren();
							ArrayList<matchTreeNode> m2lvl2children = m2lvl2curr.getChildren();
							//System.out.println(m1lvl2curr.toString() + ": " + m1lvl2children + " " + m2lvl2curr.toString() + ": "  + m2lvl2children);
							ArrayList<matchTreeNode> lvl1gchldresults = compareChildren(m1lvl2children, m2lvl2children);
							if (lvl1gchldresults.size() == 0) {
							    m2lvl2matched.add(m2test2);
							    //System.out.println("lvl2matched");
							} 
						    } 
						    //System.out.println(m1parIndex + " " + m2lvl1children.size() + " " + m2lvl2matched.size());
						    if (m2lvl2matched.size() == m2lvl1children.size()) {
							m2lvl1matched.add(m2test1);	
							//System.out.println("lvl1matched");
							break;
						    }
						}						
					    }
					}
				    }
				}				
			    } // found children to be removed
			    for (int m2scan = 0; m2scan < m2children1.size(); m2scan ++) {
				//System.out.println("m2scan: " + m2scan);
				if (!m2lvl1matched.contains(m2scan)) {
				    matchTreeNode temp = m2children1.get(m2scan);
				    //System.out.println("temp " + temp + " " + temp.tested + " " + m2scan);
				    //System.out.println(m1parIndex + " " + temp);
				    if (addedNodes.contains(temp.toString()) && temp.tested == false) {
					//System.out.println("temp in added nodes " + m1children1 + " " + m2children1);
					m2children1.remove(m2scan);
					//	System.out.println(m1parIndex + " " + m2parIndex + " removed " + temp + " from m2children1 " + m2children1);
					ArrayList<matchTreeNode> lvl1retest = compareChildren(m1children1, m2children1);
					//System.out.println(lvl1retest);
					if (lvl1retest.size() == 0) {
					    temp.tested = true;
					    m2ChldrnMatched.add(m2scan);
					    m2children1.add(temp);
					    m2scan--;
					    //System.out.println("m2ChldrnMatched add up to " + m2ChldrnMatched.size());
					    //break;
					} else {
					    temp.tested = true;
					    m2children1.add(temp);
					    m2ChldrnMatched.add(m2scan);
					    //System.out.println("m2ChldrnMatched add up to " + m2ChldrnMatched.size());
					    m2scan--;
					    //System.out.println("fixed " + m2children1);
					}
				    }
				} else if (m2children1.get(m2scan).tested == false) {
				    //System.out.println("matched " + m1parIndex + " to " + m2parIndex);
				    m2ChldrnMatched.add(m2scan);
				}
			    }
			} else if (m1children1.size() > m2children1.size()) {
			    ArrayList<Integer> m2lvl1matched = new ArrayList<Integer>();
			    ArrayList<Integer> m1lvl1matched = new ArrayList<Integer>();
			    for (int m1test1 = 0; m1test1 < m1children1.size(); m1test1 ++) {
				for (int m2test1 = 0; m2test1 < m2children1.size(); m2test1 ++) {
				    matchTreeNode m1lvl1curr = m1children1.get(m1test1);
				    matchTreeNode m2lvl1curr = m2children1.get(m2test1);
				    if (m1lvl1curr.toString().equals(m2lvl1curr.toString()) && !m2lvl1matched.contains(m2test1)) {
					ArrayList<matchTreeNode> m1lvl1children = m1lvl1curr.getChildren();
					ArrayList<matchTreeNode> m2lvl1children = m2lvl1curr.getChildren();
					ArrayList<matchTreeNode> lvl1chldresults = compareChildren(m1lvl1children, m2lvl1children);
					if (lvl1chldresults.size() == 0) {
					    ArrayList<Integer> m2lvl2matched = new ArrayList<Integer>();
					    for (int m1test2 = 0; m1test2 < m1lvl1children.size(); m1test2 ++) {
						for (int m2test2 = 0; m2test2 < m2lvl1children.size(); m2test2 ++) {
						    matchTreeNode m1lvl2curr = m1lvl1children.get(m1test2);
						    matchTreeNode m2lvl2curr = m2lvl1children.get(m2test2);
						    if (m1lvl2curr.toString().equals(m2lvl2curr.toString()) && !m2lvl2matched.contains(m2test2)) {
							ArrayList<matchTreeNode> m1lvl2children = m1lvl2curr.getChildren();
							ArrayList<matchTreeNode> m2lvl2children = m2lvl2curr.getChildren();
							ArrayList<matchTreeNode> lvl1gchldresults = compareChildren(m1lvl2children, m2lvl2children);
							if (lvl1gchldresults.size() == 0) {
							    m2lvl2matched.add(m2test2);
							} else if (m2lvl2matched.size() == m2lvl2children.size()) {
							    m2lvl1matched.add(m2test1);
							    m1lvl1matched.add(m1test1);
							    break;
							}
						    }
						}
					    }
					}
				    }
				}				
			    } // found children to be removed
			    ArrayList<matchTreeNode> m1testRmved = new ArrayList<matchTreeNode>();
			    ArrayList<matchTreeNode> m2testRmved = new ArrayList<matchTreeNode>();
			    for (int m1scan = 0; m1scan < m1children1.size(); m1scan ++) {
				if (!m1lvl1matched.contains(m1scan)) {
				    matchTreeNode temp = m1children1.get(m1scan);
				    if (rmvedNodes.contains(temp)) {
					m1testRmved.add(temp);
				    }
				}
			    }
			    for (int m2scan = 0; m2scan < m2children1.size(); m2scan ++) {
				if (!m2lvl1matched.contains(m2scan)) {
				    matchTreeNode temp = m2children1.get(m2scan);
				    if (addedNodes.contains(temp)) {
					m2testRmved.add(temp);
				    }
				}
			    }
			    for (matchTreeNode n : m1testRmved) {
				m1children1.remove(n);
			    }
			    for (matchTreeNode n : m2testRmved) {
				m2children1.remove(n);
			    }
			    ArrayList<matchTreeNode> retest = compareChildren(m1children1, m2children1);
			    if (retest.size() == 0) {
				 int index = m1parIndex + 1;
				 int ind = m2parIndex + 1;
				 mapping.put(index, ind);
				 //System.out.println("matched!! " + index + " " + ind);
				 m2visited.add(m2parIndex);
			    }
			    for (matchTreeNode m : m1testRmved) {
				m1children1.add(m);
			    }
			    for (matchTreeNode m : m2testRmved) {
				m2children1.add(m);
			    }
			    if (m2visited.contains(m2parIndex)) {
				break;
			    }
			} else if (m1children1.size() == m2children1.size()){
			    ArrayList<Integer> m1lvl2matched = new ArrayList<Integer>();
			    ArrayList<Integer> m2lvl2matched = new ArrayList<Integer>();
			    ArrayList<Integer> m2lvl3matched = new ArrayList<Integer>();
			    for (int m1lvl2 = 0; m1lvl2 < m1children1.size(); m1lvl2++) {
				for (int m2lvl2 = 0; m2lvl2 < m2children1.size(); m2lvl2++) {
				    matchTreeNode m1lvl2curr = m1children1.get(m1lvl2);
				    matchTreeNode m2lvl2curr = m2children1.get(m2lvl2);
				    if (m1lvl2curr.toString().equals(m2lvl2curr.toString()) && !m2lvl2matched.contains(m2lvl2)) {
					ArrayList<matchTreeNode> m1lvl2children = m1lvl2curr.getChildren();
					ArrayList<matchTreeNode> m2lvl2children = m2lvl2curr.getChildren();
					ArrayList<matchTreeNode> lvl2compare = compareChildren(m1lvl2children, m2lvl2children);
					if (lvl2compare.size() == 0) {
					    for (int m1lvl3 = 0; m1lvl3 < m1lvl2children.size(); m1lvl3 ++) {
						for (int m2lvl3 = 0; m2lvl3 < m2lvl2children.size(); m2lvl3 ++) {
						    matchTreeNode m1lvl3curr = m1lvl2children.get(m1lvl3);
						    matchTreeNode m2lvl3curr = m2lvl2children.get(m2lvl3);
						    if (m1lvl3curr.toString().equals(m2lvl3curr.toString()) && !m2lvl3matched.contains(m2lvl3)) {
							ArrayList<matchTreeNode> m1lvl3children = m1lvl3curr.getChildren();
							ArrayList<matchTreeNode> m2lvl3children = m2lvl3curr.getChildren();
							ArrayList<matchTreeNode> lvl3compare = compareChildren(m1lvl3children, m2lvl3children);
							if (lvl3compare.size() == 0) {
							    m2lvl3matched.add(m2lvl3);
							} 
							if (m2lvl3matched.size() == m2lvl2children.size()) {
							    m1lvl2matched.add(m1lvl2);
							    m2lvl2matched.add(m2lvl2);
							}
						    }
						}
					    }
					}
				    }
				}
			    } // matched children that can be matched
			    //  System.out.println("m1: " + m1children1.size() + " m2: " + m2children1.size());
			    matchTreeNode m1remove = null;
			    matchTreeNode m2remove = null;
			    for (int m1sc = 0; m1sc < m1children1.size(); m1sc++) {
				if (!m1lvl2matched.contains(m1sc)) {
				    //System.out.println("IN M1 REMOVE SECTION");
				    m1remove = m1children1.get(m1sc);
				    // System.out.println(rmvedNodes.contains(m1remove.toString()));
				    if (rmvedNodes.contains(m1remove.toString())) {
					m1children1.remove(m1remove);
					//	System.out.println(" removed m1: " + m1children1.size() + " m2: " + m2children1.size());
				    }
				}
			    }
			    
			    for (int m2sc = 0; m2sc < m2children1.size(); m2sc++) {
				if (!m2lvl2matched.contains(m2sc)) {
				    m2remove = m2children1.get(m2sc);
				    if (addedNodes.contains(m2remove.toString())) {
					m2children1.remove(m2sc);
					//System.out.println("removed " + m1remove.toString() + " m1: " + m1children1.size() + " removed " + m2remove + "  m2: " + m2children1.size());
					ArrayList<matchTreeNode> retest = compareChildren(m1children1, m2children1);
					if (retest.size() == 0) {
					    m2ChldrnMatched.add(m2sc);
					    //System.out.println("m2ChldrnMatched added to");
					    m1children1.add(m1remove);
					    m2children1.add(m2remove);
					    
					} else {
					    //m1children1.add(m1remove);
					    m2children1.add(m2remove);
					    m2ChldrnMatched.add(m2sc);
					    //System.out.println("fixed m1: " + m1children1.size() + " fixed m2: " + m2children1.size());
					}
				    } 
				} else {
				    m2ChldrnMatched.add(m2sc);
				}
			    }
			    m1children1.add(m1remove);
			  
			}
			//System.out.println(m1parIndex + " " + m2parIndex + " " + m2ChldrnMatched.size() + " " + m2children1.size());
			if (m2ChldrnMatched.size() == m2children1.size()) {
			    //System.out.println("match!!!" + m1parIndex + " " + m2parIndex);
			    int index = m1parIndex + 1;
			    int ind = m2parIndex + 1;
			    mapping.put(index, ind);
			    m2visited.add(m2parIndex);
			    break;
			}
			
		    } else {
			int index = m1parIndex + 1;
			int ind = m2parIndex + 1;
			boolean treematch = false;
			ArrayList<Integer> m2childrenmatched = new ArrayList<Integer>();
			for (int lvl2 = 0; lvl2 < m1children1.size(); lvl2++) {
			    for (int m2lvl2 = 0; m2lvl2 < m2children1.size(); m2lvl2++) {
				if (!m2childrenmatched.contains(m2lvl2)) {
				    ArrayList<matchTreeNode> lvl2results = compareChildren(m1children1.get(lvl2).getChildren(), m2children1.get(m2lvl2).getChildren());
				    if (lvl2results.size() != 0) {
					// compare with removal tests
					ArrayList<matchTreeNode> m1level2 = m1children1.get(lvl2).getChildren();
					ArrayList<matchTreeNode> m2level2 = m2children1.get(m2lvl2).getChildren();
					if (m1level2.size() < m2level2.size()) {
					    ArrayList<Integer> m2lvl2matched = new ArrayList<Integer>();
					    for (int m1test2 = 0; m1test2 < m1level2.size(); m1test2++) {
						for (int m2test2 = 0; m2test2 < m2level2.size(); m2test2++) {
						    matchTreeNode m1lvl2curr = m1level2.get(m1test2);
						    matchTreeNode m2lvl2curr = m2level2.get(m2test2);
						    if (m1lvl2curr.toString().equals(m2lvl2curr.toString()) && !m2lvl2matched.contains(m2test2)) {
							ArrayList<matchTreeNode> m1lvl2currChildren = m1lvl2curr.getChildren();
							ArrayList<matchTreeNode> m2lvl2currChildren = m2lvl2curr.getChildren();
							ArrayList<matchTreeNode> lvl2chldresults = compareChildren(m1lvl2currChildren, m2lvl2currChildren);
							if (lvl2chldresults.size() == 0) {
							    m2lvl2matched.add(m2test2);
							    break;
							}
						    }
						}
					    } // found children to remove
					    for (int m2scan = 0; m2scan < m2level2.size(); m2scan++) {
						if (!m2lvl2matched.contains(m2scan)) {
						    matchTreeNode temp = m2level2.get(m2scan);
						    if (addedNodes.contains(temp)) {
							m2level2.remove(m2scan);
							ArrayList<matchTreeNode> lvl2restest = compareChildren(m1level2, m2level2);
							if (lvl2restest.size() == 0) {
							    m2childrenmatched.add(m2lvl2);
							} else {
							    m2level2.add(temp);
							}
						    }
						}
					    } // tried removing children
					} else if (m1level2.size() > m2level2.size()) {
					    ArrayList<Integer> m1lvl2matched = new ArrayList<Integer>();
					    ArrayList<Integer> m2lvl2matched = new ArrayList<Integer>();
					    for (int m1test2 = 0; m1test2 < m1level2.size(); m1test2++) {
						for (int m2test2 = 0; m2test2 < m2level2.size(); m2test2++) {
						    matchTreeNode m1lvl2curr = m1level2.get(m1test2);
						    matchTreeNode m2lvl2curr = m2level2.get(m2test2);
						    if (m1lvl2curr.toString().equals(m2lvl2curr.toString()) && !m2lvl2matched.contains(m2test2)) {
							ArrayList<matchTreeNode> m1lvl2currChildren = m1lvl2curr.getChildren();
							ArrayList<matchTreeNode> m2lvl2currChildren = m2lvl2curr.getChildren();
							ArrayList<matchTreeNode> lvl2chldresults = compareChildren(m1lvl2currChildren, m2lvl2currChildren);
							if (lvl2chldresults.size() == 0) {
							    m2lvl2matched.add(m2test2);
							    m1lvl2matched.add(m1test2);
							    break;
							}
						    }
						}
					    } // found children to remove
					    for (int m1scan = 0; m1scan < m1level2.size(); m1scan++) {
						if (!m1lvl2matched.contains(m1scan)) {
						    matchTreeNode temp = m1level2.get(m1scan);
						    if (rmvedNodes.contains(temp)) {
							m1level2.remove(m1scan);
							ArrayList<matchTreeNode> lvl2retest = compareChildren(m1level2, m2level2);
							if (lvl2retest.size() == 0) {
							    m2childrenmatched.add(m2lvl2);
							} else {
							    m1level2.add(temp);
							}
						    }
						}
					    }
					} // tried removing children
				    } else if (lvl2results.size() == 0) {
					ArrayList<matchTreeNode> m1level3 = m1children1.get(lvl2).getChildren();
					ArrayList<matchTreeNode> m2level3 = m2children1.get(m2lvl2).getChildren();
					ArrayList<matchTreeNode> lvl3results = compareChildren(m1level3, m2level3);
					if (lvl3results.size() == 0) {
					    m2childrenmatched.add(m2lvl2);
					} else if (lvl3results.size() != 0) {
					    // compare with removal test
					    if (m1level3.size() < m2level3.size()) {
						ArrayList<Integer> m2lvl3matched = new ArrayList<Integer>();
						for (int lvl3 = 0; lvl3 < m1level3.size(); lvl3++) {
						    for (int m2lvl3 = 0; m2lvl3 < m2level3.size(); m2lvl3++) {
							matchTreeNode m1lvl3curr = m1level3.get(lvl3);
							matchTreeNode m2lvl3curr = m2level3.get(m2lvl3);
							if (m1lvl3curr.toString().equals(m2lvl3curr.toString()) && !m2lvl3matched.contains(m2lvl3)) {
							    m2lvl3matched.add(m2lvl3);
							    break;
							}
						    }
						}
						for (int m2test = 0; m2test < m2level3.size(); m2test++) {
						    if (!m2lvl3matched.contains(m2test)) {
							matchTreeNode temp = m2level3.get(m2test);
							if (addedNodes.contains(temp)) {
							    m2level3.remove(m2test);
							    ArrayList<matchTreeNode> lvl3retest = compareChildren(m1level3, m2level3);
							    if (lvl3retest.size() == 0) {
								m2childrenmatched.add(m2lvl2);
							    } else {
								m2level3.add(temp);
							    }
							}
						    }
						}
					    } else if (m1level3.size() > m2level3.size()) {
						ArrayList<Integer> m1lvl3matched = new ArrayList<Integer>();
						ArrayList<Integer> m2lvl3matched = new ArrayList<Integer>();
						for (int lvl3 = 0; lvl3 < m1level3.size(); lvl3++) {
						    for (int m2lvl3 = 0; m2lvl3 < m2level3.size(); m2lvl3++) {
							matchTreeNode m1lvl3curr = m1level3.get(lvl3);
							matchTreeNode m2lvl3curr = m2level3.get(m2lvl3);
							if (m1lvl3curr.toString().equals(m2lvl3curr.toString()) && !m2lvl3matched.contains(m2lvl3)) {
							    m1lvl3matched.add(lvl3);
							    m2lvl3matched.add(m2lvl3);
							    break;
							}
						    }
						}
						for (int m1test = 0; m1test < m1level3.size(); m1test++) {
						    if (!m1lvl3matched.contains(m1test)) {
							matchTreeNode temp = m1level3.get(m1test);
							if (rmvedNodes.contains(temp)) {
							    m1level3.remove(m1test);
							    ArrayList<matchTreeNode> lvl3retest = compareChildren(m1level3, m2level3);
							    if (lvl3retest.size() == 0) {
								m2childrenmatched.add(m2lvl2);
							    } else {
								m1level3.add(temp);
							    }
							}
						    }
						}
					    }
					}
				    } else if (m2childrenmatched.size() == m2children1.size()) {
					treematch = true;
				    } else {
					continue;
				    }
				}
			    } 
			    
			} if (treematch == true) {
			    mapping.put(index, ind);
			    //System.out.println(index + " " + ind);
			    m2visited.add(m2parIndex);
			    break;
			} else {
			    mapping.put(index, ind);
			    //System.out.println(index + " " + ind);
			    m2visited.add(m2parIndex);
			    break;
			}
		    }
		}
	    }
	}
